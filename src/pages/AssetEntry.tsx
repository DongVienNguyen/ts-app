import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Layout from '@/components/Layout';
import FormHeader from '@/components/FormHeader';
import AssetEntryForm from '@/components/AssetEntryForm';
import { useTimeRestriction } from '@/hooks/useTimeRestriction';
import { useAssetEntry } from '@/hooks/useAssetEntry';
import { useAssetEntryForm } from '@/hooks/useAssetEntryForm';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Terminal, Camera, Zap, BookOpen } from 'lucide-react';
import { toast } from 'sonner';

const AssetEntry = () => {
  const { isRestrictedTime } = useTimeRestriction();
  const { submitAssetEntry, isSubmitting } = useAssetEntry();
  const {
    formData,
    setFormData,
    multipleAssets,
    setMultipleAssets,
    handleRoomChange,
    handleAssetChange,
    addAssetField,
    removeAssetField,
    isFormValid,
    clearForm,
    disabledBeforeDate,
  } = useAssetEntryForm();

  const handleAssetCodesDetected = (codes: string[]) => {
    console.log('üéØ Asset codes detected:', codes);
    
    // Replace current assets with detected codes, but keep at least one empty field
    const newAssets = codes.length > 0 ? codes : [''];
    setMultipleAssets(newAssets);
    
    if (codes.length > 0) {
      toast.success(
        `üéâ ƒê√£ ƒëi·ªÅn ${codes.length} m√£ t√†i s·∫£n!`,
        { 
          description: `M√£ t√†i s·∫£n: ${codes.join(', ')}`,
          duration: 4000
        }
      );
    }
  };

  const handleRoomDetected = (room: string) => {
    console.log('üè¢ Room detected:', room);
    
    // Auto-fill room if not already selected
    if (!formData.room) {
      handleRoomChange(room);
      toast.success(
        `üìç ƒê√£ ch·ªçn ph√≤ng: ${room}`,
        { duration: 3000 }
      );
    } else if (formData.room !== room) {
      // Show suggestion if different room detected
      toast.info(
        `üí° AI ph√°t hi·ªán ph√≤ng: ${room}`,
        { 
          description: `Hi·ªán t·∫°i ƒëang ch·ªçn: ${formData.room}. B·∫°n c√≥ mu·ªën thay ƒë·ªïi?`,
          duration: 5000
        }
      );
    }
  };

  const handleSubmit = async () => {
    if (!isFormValid) {
      toast.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc");
      return;
    }

    try {
      const result = await submitAssetEntry(formData, multipleAssets);
      
      if (result.success) {
        toast.success(
          "‚úÖ G·ª≠i th√¥ng b√°o th√†nh c√¥ng!",
          { 
            description: `ƒê√£ x·ª≠ l√Ω ${multipleAssets.filter(a => a.trim()).length} m√£ t√†i s·∫£n`,
            duration: 4000
          }
        );
        clearForm();
      } else {
        toast.error(
          "‚ùå C√≥ l·ªói x·∫£y ra",
          { description: result.error || "Vui l√≤ng th·ª≠ l·∫°i" }
        );
      }
    } catch (error) {
      console.error('Submit error:', error);
      toast.error(
        "‚ùå L·ªói h·ªá th·ªëng",
        { description: "Vui l√≤ng th·ª≠ l·∫°i sau" }
      );
    }
  };

  return (
    <Layout>
      <div className="max-w-4xl mx-auto space-y-6">
        <FormHeader />
        
        {/* Time Restriction Alert */}
        {isRestrictedTime && (
          <Alert variant="destructive">
            <Terminal className="h-4 w-4" />
            <AlertTitle>C·∫£nh b√°o!</AlertTitle>
            <AlertDescription>
              Hi·ªán t·∫°i ƒëang trong khung gi·ªù c·∫•m (7:45-8:05 ho·∫∑c 12:45-13:05). Vui l√≤ng nh·∫Øn Zalo thay v√¨ d√πng h·ªá th·ªëng.
            </AlertDescription>
          </Alert>
        )}

        {/* Main Form Card */}
        <Card className="shadow-lg">
          <CardHeader className="bg-gradient-to-r from-blue-50 to-green-50">
            <CardTitle className="text-2xl font-bold text-center text-gray-800 flex items-center justify-center space-x-2">
              <Camera className="w-6 h-6 text-green-600" />
              <span>üìã Th√¥ng b√°o M∆∞·ª£n/Xu·∫•t T√†i s·∫£n</span>
            </CardTitle>
            <p className="text-center text-gray-600 mt-2">
              S·ª≠ d·ª•ng AI ƒë·ªÉ t·ª± ƒë·ªông ph√°t hi·ªán m√£ t√†i s·∫£n t·ª´ h√¨nh ·∫£nh
            </p>
          </CardHeader>
          <CardContent className="p-6">
            <AssetEntryForm
              isRestrictedTime={isRestrictedTime}
              formData={formData}
              setFormData={setFormData}
              multipleAssets={multipleAssets}
              handleRoomChange={handleRoomChange}
              handleAssetChange={handleAssetChange}
              addAssetField={addAssetField}
              removeAssetField={removeAssetField}
              isFormValid={isFormValid}
              isSubmitting={isSubmitting}
              onSubmit={handleSubmit}
              disabledBeforeDate={disabledBeforeDate}
              onAssetCodesDetected={handleAssetCodesDetected}
              onRoomDetected={handleRoomDetected}
            />
          </CardContent>
        </Card>

        {/* Help and Features Section */}
        <div className="grid md:grid-cols-2 gap-6">
          {/* AI Features Card */}
          <Card className="border-green-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-semibold text-green-800 flex items-center space-x-2">
                <Zap className="w-5 h-5" />
                <span>ü§ñ T√≠nh nƒÉng AI</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="bg-green-50 p-4 rounded-lg">
                <ul className="text-sm text-green-700 space-y-2">
                  <li className="flex items-start space-x-2">
                    <span className="text-green-500 mt-0.5">‚Ä¢</span>
                    <span><strong>Ch·ª•p ·∫£nh m√£ t√†i s·∫£n</strong> ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn form</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="text-green-500 mt-0.5">‚Ä¢</span>
                    <span><strong>Ph√°t hi·ªán ph√≤ng ban</strong> t·ª´ m√£ t√†i s·∫£n</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="text-green-500 mt-0.5">‚Ä¢</span>
                    <span><strong>H·ªó tr·ª£ nhi·ªÅu m√£</strong> trong m·ªôt ·∫£nh</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="text-green-500 mt-0.5">‚Ä¢</span>
                    <span><strong>Ho·∫°t ƒë·ªông tr√™n</strong> c·∫£ mobile v√† desktop</span>
                  </li>
                </ul>
              </div>
            </CardContent>
          </Card>

          {/* Instructions Card */}
          <Card className="border-blue-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-semibold text-blue-800 flex items-center space-x-2">
                <BookOpen className="w-5 h-5" />
                <span>üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="bg-blue-50 p-4 rounded-lg">
                <ul className="text-sm text-blue-700 space-y-2">
                  <li className="flex items-start space-x-2">
                    <span className="text-blue-500 mt-0.5">1.</span>
                    <span><strong>Ch·ªçn ph√≤ng</strong> v√† lo·∫°i giao d·ªãch</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="text-blue-500 mt-0.5">2.</span>
                    <span><strong>Nh·∫≠p m√£ t√†i s·∫£n</strong> ho·∫∑c d√πng AI</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="text-blue-500 mt-0.5">3.</span>
                    <span><strong>Ch·ªçn ca</strong> v√† ng√†y giao d·ªãch</span>
                  </li>
                  <li className="flex items-start space-x-2">
                    <span className="text-blue-500 mt-0.5">4.</span>
                    <span><strong>Th√™m ghi ch√∫</strong> n·∫øu c·∫ßn</span>
                  </li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Tips Card */}
        <Card className="border-yellow-200 bg-gradient-to-r from-yellow-50 to-orange-50">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <div className="text-2xl">üí°</div>
              <div>
                <h3 className="font-semibold text-yellow-800 mb-2">M·∫πo s·ª≠ d·ª•ng AI hi·ªáu qu·∫£:</h3>
                <div className="grid md:grid-cols-2 gap-4 text-sm text-yellow-700">
                  <ul className="space-y-1">
                    <li>‚Ä¢ Ch·ª•p ·∫£nh trong ƒëi·ªÅu ki·ªán √°nh s√°ng t·ªët</li>
                    <li>‚Ä¢ ƒê·∫£m b·∫£o m√£ t√†i s·∫£n hi·ªÉn th·ªã r√µ r√†ng</li>
                    <li>‚Ä¢ Gi·ªØ camera ·ªïn ƒë·ªãnh khi ch·ª•p</li>
                  </ul>
                  <ul className="space-y-1">
                    <li>‚Ä¢ Ch·ª•p t·ª´ g√≥c vu√¥ng g√≥c v·ªõi nh√£n</li>
                    <li>‚Ä¢ Tr√°nh b√≥ng che ho·∫∑c ph·∫£n quang</li>
                    <li>‚Ä¢ C√≥ th·ªÉ ch·ª•p nhi·ªÅu m√£ trong m·ªôt ·∫£nh</li>
                  </ul>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </Layout>
  );
};

export default AssetEntry;