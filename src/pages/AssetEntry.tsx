import Layout from '@/components/Layout';
import { Card, CardContent } from '@/components/ui/card';
import AssetEntryForm from '@/components/AssetEntryForm';
import { useTimeRestriction } from '@/hooks/useTimeRestriction';
import { useAssetEntry } from '@/hooks/useAssetEntry';
import { useAssetEntryForm } from '@/hooks/useAssetEntryForm';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Clock } from 'lucide-react';
import { toast } from 'sonner';

const AssetEntry = () => {
  const { isRestrictedTime } = useTimeRestriction();
  const { submitAssetEntry, isSubmitting } = useAssetEntry();
  const {
    formData,
    setFormData,
    multipleAssets,
    setMultipleAssets,
    handleRoomChange,
    handleAssetChange,
    addAssetField,
    removeAssetField,
    isFormValid,
    clearForm,
    disabledBeforeDate,
  } = useAssetEntryForm();

  const handleAssetCodesDetected = (codes: string[]) => {
    console.log('üéØ Asset codes detected:', codes);
    
    // Replace current assets with detected codes, but keep at least one empty field
    const newAssets = codes.length > 0 ? codes : [''];
    setMultipleAssets(newAssets);
    
    if (codes.length > 0) {
      toast.success(
        `üéâ ƒê√£ ƒëi·ªÅn ${codes.length} m√£ t√†i s·∫£n!`,
        { 
          description: `M√£ t√†i s·∫£n: ${codes.join(', ')}`,
          duration: 4000
        }
      );
    }
  };

  const handleRoomDetected = (room: string) => {
    console.log('üè¢ Room detected:', room);
    
    // Auto-fill room if not already selected
    if (!formData.room) {
      handleRoomChange(room);
      toast.success(
        `üìç ƒê√£ ch·ªçn ph√≤ng: ${room}`,
        { duration: 3000 }
      );
    } else if (formData.room !== room) {
      // Show suggestion if different room detected
      toast.info(
        `üí° AI ph√°t hi·ªán ph√≤ng: ${room}`,
        { 
          description: `Hi·ªán t·∫°i ƒëang ch·ªçn: ${formData.room}. B·∫°n c√≥ mu·ªën thay ƒë·ªïi?`,
          duration: 5000
        }
      );
    }
  };

  const handleSubmit = async () => {
    if (!isFormValid) {
      toast.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc");
      return;
    }

    try {
      console.log('üì§ Starting submission...', { formData, multipleAssets });
      
      const result = await submitAssetEntry(formData, multipleAssets);
      
      if (result.success) {
        toast.success(
          "‚úÖ G·ª≠i th√¥ng b√°o th√†nh c√¥ng!",
          { 
            description: `ƒê√£ x·ª≠ l√Ω ${multipleAssets.filter(a => a.trim()).length} m√£ t√†i s·∫£n`,
            duration: 4000
          }
        );
        clearForm();
      } else {
        toast.error(
          "‚ùå C√≥ l·ªói x·∫£y ra",
          { description: result.error || "Vui l√≤ng th·ª≠ l·∫°i" }
        );
      }
    } catch (error) {
      console.error('‚ùå Submit error:', error);
      toast.error(
        "‚ùå L·ªói h·ªá th·ªëng",
        { description: "Vui l√≤ng th·ª≠ l·∫°i sau" }
      );
    }
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4 space-y-6">
          {/* Header */}
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Th√¥ng b√°o M∆∞·ª£n/Xu·∫•t
            </h1>
            <p className="text-gray-600">
              Khung gi·ªù <span className="font-semibold text-red-600">7:45-8:05</span> v√†{' '}
              <span className="font-semibold text-red-600">12:45-13:05</span> h√£y nh·∫Øn Zalo v√¨ ƒë√£ ch·ªët DS
            </p>
          </div>

          {/* Time Restriction Alert */}
          {isRestrictedTime && (
            <Alert className="border-red-200 bg-red-50">
              <Clock className="h-4 w-4 text-red-600" />
              <AlertDescription className="text-red-700">
                Hi·ªán t·∫°i ƒëang trong khung gi·ªù c·∫•m. Vui l√≤ng s·ª≠ d·ª•ng Zalo ƒë·ªÉ th√¥ng b√°o.
              </AlertDescription>
            </Alert>
          )}

          {/* Info Banner */}
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="text-sm text-green-800">
              <span className="font-medium">T·ª´ Ph·∫£i</span> sang <span className="font-medium">Tr√°i</span>: 2 k√Ω t·ª± t·ª´ th·ª©{' '}
              <span className="font-semibold">9</span> v√† <span className="font-semibold">10</span> l√†{' '}
              <span className="font-semibold">NƒÉm TS</span>: 24, 4 k√Ω t·ª± cu·ªëi l√†{' '}
              <span className="font-semibold">M√£ TS</span>: 259 - vd: 0424102470200259 ‚Üí 259.24
            </div>
          </div>

          {/* Main Form Card */}
          <Card className="shadow-lg border-0">
            <CardContent className="p-8">
              <AssetEntryForm
                isRestrictedTime={isRestrictedTime}
                formData={formData}
                setFormData={setFormData}
                multipleAssets={multipleAssets}
                handleRoomChange={handleRoomChange}
                handleAssetChange={handleAssetChange}
                addAssetField={addAssetField}
                removeAssetField={removeAssetField}
                isFormValid={isFormValid}
                isSubmitting={isSubmitting}
                onSubmit={handleSubmit}
                disabledBeforeDate={disabledBeforeDate}
                onAssetCodesDetected={handleAssetCodesDetected}
                onRoomDetected={handleRoomDetected}
              />
            </CardContent>
          </Card>
        </div>
      </div>
    </Layout>
  );
};

export default AssetEntry;