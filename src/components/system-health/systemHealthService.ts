import { supabase } from '@/integrations/supabase/client';
import { getPerformanceStats } from '@/utils/performanceMonitor';
import { SystemHealth } from './types';
import { determineOverallHealth } from './utils';

export class SystemHealthService {
  // Ki·ªÉm tra trang hi·ªán t·∫°i ƒë·ªÉ ch·ªâ load d·ªØ li·ªáu c·∫ßn thi·∫øt
  private static getCurrentPageContext(): string {
    const path = window.location.pathname;
    
    if (path.includes('/security-monitor')) return 'security';
    if (path.includes('/usage-monitoring')) return 'usage';
    if (path.includes('/system-backup')) return 'backup';
    if (path.includes('/data-management')) return 'data';
    if (path === '/' || path.includes('/dashboard')) return 'dashboard';
    
    return 'minimal'; // Ch·ªâ load d·ªØ li·ªáu t·ªëi thi·ªÉu cho c√°c trang kh√°c
  }

  static async checkSystemHealth(): Promise<SystemHealth> {
    console.log('üè• System health check starting...');
    
    const context = this.getCurrentPageContext();
    
    try {
      // Ch·ªâ ki·ªÉm tra database c∆° b·∫£n cho t·∫•t c·∫£ trang
      const dbHealth = await this.checkBasicDatabaseHealth();
      
      // Load d·ªØ li·ªáu kh√°c d·ª±a tr√™n context
      let apiHealth, securityHealth, performanceData;
      
      if (context === 'dashboard' || context === 'security') {
        // Ch·ªâ load ƒë·∫ßy ƒë·ªß cho dashboard v√† security monitor
        [apiHealth, securityHealth] = await Promise.all([
          this.checkApiHealth(),
          this.checkSecurityHealth()
        ]);
        performanceData = getPerformanceStats();
      } else if (context === 'minimal') {
        // Load t·ªëi thi·ªÉu cho c√°c trang kh√°c
        apiHealth = this.getMinimalApiHealth();
        securityHealth = this.getMinimalSecurityHealth();
        performanceData = this.getMinimalPerformanceStats();
      } else {
        // Load m·ªôt ph·∫ßn cho c√°c trang chuy√™n bi·ªát
        apiHealth = await this.checkApiHealth();
        securityHealth = this.getMinimalSecurityHealth();
        performanceData = getPerformanceStats();
      }

      // Simulate system metrics v·ªõi d·ªØ li·ªáu cached
      const cachedMetrics = this.getCachedSystemMetrics();

      const health: SystemHealth = {
        database: {
          status: dbHealth.status,
          responseTime: dbHealth.responseTime,
          connections: dbHealth.connections,
          lastCheck: new Date().toISOString(),
          uptime: dbHealth.uptime
        },
        api: {
          status: apiHealth.status,
          responseTime: apiHealth.responseTime,
          uptime: apiHealth.uptime,
          lastCheck: new Date().toISOString(),
          requestsPerMinute: apiHealth.requestsPerMinute
        },
        storage: {
          status: cachedMetrics.storageUsed > 80 ? 'warning' : cachedMetrics.storageUsed > 90 ? 'error' : 'healthy',
          used: cachedMetrics.storageUsed,
          total: 100,
          percentage: cachedMetrics.storageUsed,
          growth: cachedMetrics.storageGrowth,
          lastCheck: new Date().toISOString()
        },
        memory: {
          status: cachedMetrics.memoryUsed > 80 ? 'warning' : cachedMetrics.memoryUsed > 90 ? 'error' : 'healthy',
          used: cachedMetrics.memoryUsed,
          total: 100,
          percentage: cachedMetrics.memoryUsed,
          peak: cachedMetrics.memoryPeak,
          lastCheck: new Date().toISOString()
        },
        performance: {
          averageResponseTime: performanceData.averageDuration,
          totalOperations: performanceData.totalMetrics,
          slowestOperation: performanceData.slowestMetric?.name || null,
          fastestOperation: performanceData.fastestMetric?.name || null
        },
        security: {
          status: securityHealth.status,
          activeThreats: securityHealth.activeThreats,
          lastSecurityScan: securityHealth.lastSecurityScan,
          failedLogins: securityHealth.failedLogins,
          lastCheck: new Date().toISOString()
        },
        overall: 'healthy'
      };

      // Determine overall health
      health.overall = determineOverallHealth(
        health.database.status,
        health.api.status,
        health.storage.status,
        health.memory.status,
        health.security.status
      );

      console.log(`‚úÖ System health check completed for context: ${context}`);
      return health;
      
    } catch (error) {
      console.error('‚ùå System health check failed:', error);
      return this.getErrorHealthState();
    }
  }

  // Ki·ªÉm tra database c∆° b·∫£n - lu√¥n c·∫ßn thi·∫øt
  private static async checkBasicDatabaseHealth() {
    const start = Date.now();
    
    try {
      // Ch·ªâ ki·ªÉm tra k·∫øt n·ªëi c∆° b·∫£n
      const { error } = await supabase
        .from('staff')
        .select('count')
        .limit(1);

      const responseTime = Date.now() - start;

      if (error) {
        throw new Error(`Database query failed: ${error.message}`);
      }

      const connections = Math.floor(Math.random() * 10) + 1;
      const uptime = 99.9 - Math.random() * 0.5;

      const status = responseTime > 2000 ? 'error' : 
                    responseTime > 1000 ? 'warning' : 'healthy';

      return {
        status,
        responseTime,
        connections,
        uptime
      };
    } catch (error) {
      return {
        status: 'error' as const,
        responseTime: Date.now() - start,
        connections: 0,
        uptime: 0
      };
    }
  }

  // Ki·ªÉm tra API ƒë·∫ßy ƒë·ªß
  private static async checkApiHealth() {
    const start = Date.now();
    
    try {
      // Simulate API health check
      await new Promise(resolve => setTimeout(resolve, Math.random() * 200 + 50));
      
      const responseTime = Date.now() - start;
      const uptime = 99.9 - Math.random() * 0.5;
      const requestsPerMinute = Math.floor(Math.random() * 100) + 50;

      const status = responseTime > 2000 ? 'error' : 
                    responseTime > 1000 ? 'warning' : 'healthy';

      return {
        status,
        responseTime,
        uptime,
        requestsPerMinute
      };
    } catch (error) {
      return {
        status: 'error' as const,
        responseTime: Date.now() - start,
        uptime: 0,
        requestsPerMinute: 0
      };
    }
  }

  // API health t·ªëi thi·ªÉu - kh√¥ng c·∫ßn query
  private static getMinimalApiHealth() {
    return {
      status: 'healthy' as const,
      responseTime: 150,
      uptime: 99.9,
      requestsPerMinute: 75
    };
  }

  // Ki·ªÉm tra security ƒë·∫ßy ƒë·ªß
  private static async checkSecurityHealth() {
    try {
      // Ch·ªâ ki·ªÉm tra khi th·∫≠t s·ª± c·∫ßn thi·∫øt
      const activeThreats = 0;
      const failedLoginCount = Math.floor(Math.random() * 5);
      const lastSecurityScan = new Date().toISOString();

      const status = activeThreats > 0 ? 'error' : 
                    failedLoginCount > 10 ? 'warning' : 'healthy';

      return {
        status,
        activeThreats,
        failedLogins: failedLoginCount,
        lastSecurityScan
      };
    } catch (error) {
      return {
        status: 'error' as const,
        activeThreats: 0,
        failedLogins: 0,
        lastSecurityScan: new Date().toISOString()
      };
    }
  }

  // Security health t·ªëi thi·ªÉu
  private static getMinimalSecurityHealth() {
    return {
      status: 'healthy' as const,
      activeThreats: 0,
      failedLogins: 2,
      lastSecurityScan: new Date().toISOString()
    };
  }

  // Performance stats t·ªëi thi·ªÉu
  private static getMinimalPerformanceStats() {
    return {
      averageDuration: 150,
      totalMetrics: 100,
      slowestMetric: null,
      fastestMetric: null
    };
  }

  // Cache system metrics ƒë·ªÉ tr√°nh t√≠nh to√°n l·∫°i
  private static cachedMetrics: any = null;
  private static lastMetricsUpdate = 0;

  private static getCachedSystemMetrics() {
    const now = Date.now();
    
    // Cache trong 5 ph√∫t
    if (this.cachedMetrics && (now - this.lastMetricsUpdate) < 300000) {
      return this.cachedMetrics;
    }

    // T·∫°o metrics m·ªõi
    this.cachedMetrics = {
      storageUsed: Math.random() * 80 + 10,
      memoryUsed: Math.random() * 70 + 20,
      storageGrowth: Math.random() * 5 - 2.5
    };
    
    this.cachedMetrics.memoryPeak = this.cachedMetrics.memoryUsed + Math.random() * 10;
    this.lastMetricsUpdate = now;

    return this.cachedMetrics;
  }

  // Error state
  private static getErrorHealthState(): SystemHealth {
    return {
      database: {
        status: 'error',
        responseTime: 0,
        connections: 0,
        lastCheck: new Date().toISOString(),
        uptime: 0
      },
      api: {
        status: 'error',
        responseTime: 0,
        uptime: 0,
        lastCheck: new Date().toISOString(),
        requestsPerMinute: 0
      },
      storage: {
        status: 'error',
        used: 0,
        total: 100,
        percentage: 0,
        growth: 0,
        lastCheck: new Date().toISOString()
      },
      memory: {
        status: 'error',
        used: 0,
        total: 100,
        percentage: 0,
        peak: 0,
        lastCheck: new Date().toISOString()
      },
      performance: {
        averageResponseTime: 0,
        totalOperations: 0,
        slowestOperation: null,
        fastestOperation: null
      },
      security: {
        status: 'error',
        activeThreats: 0,
        lastSecurityScan: new Date().toISOString(),
        failedLogins: 0,
        lastCheck: new Date().toISOString()
      },
      overall: 'error'
    };
  }
}