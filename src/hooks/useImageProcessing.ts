import { useState } from 'react';
import { toast } from 'sonner';
import { analyzeImageWithGemini, GeminiAnalysisResult } from '@/services/geminiService';
import { createCameraFileInput, handleCameraError, formatFileSize } from '@/utils/cameraUtils';
import { CAMERA_CONFIG } from '@/config';

interface UseImageProcessingProps {
  onAssetCodesDetected: (codes: string[]) => void;
  onRoomDetected: (room: string) => void;
}

export const useImageProcessing = ({ onAssetCodesDetected, onRoomDetected }: UseImageProcessingProps) => {
  const [isProcessingImage, setIsProcessingImage] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const processImages = async (files: FileList | null): Promise<GeminiAnalysisResult | undefined> => {
    if (!files || files.length === 0) {
      toast.error("Kh√¥ng c√≥ t·ªáp n√†o ƒë∆∞·ª£c ch·ªçn.");
      return;
    }

    setIsProcessingImage(true);
    setIsDialogOpen(false); // Close dialog immediately

    const imageFile = files[0];

    // Validate file type
    if (!CAMERA_CONFIG.SUPPORTED_FORMATS.includes(imageFile.type)) {
      toast.error('ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£', {
        description: 'Vui l√≤ng ch·ªçn file ·∫£nh (JPG, PNG, WebP)'
      });
      setIsProcessingImage(false);
      return;
    }

    // Validate file size
    if (imageFile.size > CAMERA_CONFIG.MAX_FILE_SIZE) {
      toast.error('K√≠ch th∆∞·ªõc t·ªáp qu√° l·ªõn', {
        description: `T·ªëi ƒëa: ${(CAMERA_CONFIG.MAX_FILE_SIZE / 1024 / 1024).toFixed(1)}MB. File hi·ªán t·∫°i: ${formatFileSize(imageFile.size)}`
      });
      setIsProcessingImage(false);
      return;
    }

    // Show processing toast with file info
    const processingToast = toast.loading("ü§ñ ƒêang ph√¢n t√≠ch h√¨nh ·∫£nh b·∫±ng AI...", {
      description: `ƒêang x·ª≠ l√Ω ${imageFile.name} (${formatFileSize(imageFile.size)})`
    });

    try {
      console.log('üöÄ Starting image analysis:', {
        name: imageFile.name,
        size: formatFileSize(imageFile.size),
        type: imageFile.type
      });

      const result = await analyzeImageWithGemini(imageFile);

      console.log('üìä Image processing result:', result);

      // Dismiss processing toast
      toast.dismiss(processingToast);

      if (result.assetCodes && result.assetCodes.length > 0) {
        onAssetCodesDetected(result.assetCodes);
        toast.success(
          `üéØ Ph√°t hi·ªán ${result.assetCodes.length} m√£ t√†i s·∫£n!`,
          { 
            description: `M√£ t√†i s·∫£n: ${result.assetCodes.join(', ')}`,
            duration: 5000
          }
        );
      } else {
        toast.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ t√†i s·∫£n", {
          description: "H√£y th·ª≠ ch·ª•p ·∫£nh r√µ n√©t h∆°n ho·∫∑c ƒë·∫£m b·∫£o m√£ t√†i s·∫£n hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß",
          duration: 6000
        });
      }

      if (result.detectedRoom) {
        onRoomDetected(result.detectedRoom);
        toast.success(
          `üìç Ph√°t hi·ªán ph√≤ng: ${result.detectedRoom}`,
          { duration: 3000 }
        );
      }

      return result;
    } catch (error) {
      console.error('‚ùå Error processing image:', error);
      toast.dismiss(processingToast);
      
      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω h√¨nh ·∫£nh.';
      toast.error("‚ùå L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh", { 
        description: errorMessage,
        duration: 8000
      });
      return undefined;
    } finally {
      setIsProcessingImage(false);
    }
  };

  const openCamera = async () => {
    try {
      console.log('üì± Opening camera...');
      
      // Check if camera is supported
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        console.warn('üì± Camera API not supported, using file input fallback');
        openCameraFallback();
        return;
      }

      // Create camera file input (this is the most reliable method across devices)
      const input = createCameraFileInput(async (file) => {
        console.log('üì∑ Camera captured file:', file.name, formatFileSize(file.size));
        
        // Create FileList-like object
        const fileList = {
          0: file,
          length: 1,
          item: (index: number) => index === 0 ? file : null,
          [Symbol.iterator]: function* () {
            yield file;
          }
        } as FileList;

        const result = await processImages(fileList);
        if (result) {
          console.log('‚úÖ Camera image processed successfully:', result);
        }
      });

      // Add to DOM temporarily and trigger
      document.body.appendChild(input);
      input.click();
      
      // Clean up after a delay
      setTimeout(() => {
        if (document.body.contains(input)) {
          document.body.removeChild(input);
        }
      }, 1000);
      
      // Close dialog when camera opens
      setIsDialogOpen(false);
      
      toast.info("üì± ƒêang m·ªü camera...", {
        description: "Ch·ª•p ·∫£nh m√£ t√†i s·∫£n r√µ n√©t ƒë·ªÉ AI ph√¢n t√≠ch",
        duration: 3000
      });
      
    } catch (error) {
      console.error('‚ùå Error opening camera:', error);
      handleCameraError(error as any);
      
      // Fallback to file input
      openCameraFallback();
    }
  };

  const openCameraFallback = () => {
    console.log('üìÅ Using file input fallback...');
    
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = CAMERA_CONFIG.SUPPORTED_FORMATS.join(',');
    input.style.display = 'none';
    
    input.onchange = async (e) => {
      const target = e.target as HTMLInputElement;
      if (target.files && target.files.length > 0) {
        console.log('üìÅ File selected:', target.files[0].name);
        const result = await processImages(target.files);
        if (result) {
          console.log('‚úÖ File processed successfully:', result);
        }
      }
    };

    document.body.appendChild(input);
    input.click();
    
    setTimeout(() => {
      if (document.body.contains(input)) {
        document.body.removeChild(input);
      }
    }, 1000);

    setIsDialogOpen(false);
    
    toast.info("üìÅ Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã", {
      description: "Ch·ªçn ·∫£nh ch·ª©a m√£ t√†i s·∫£n ƒë·ªÉ AI ph√¢n t√≠ch"
    });
  };

  return {
    isProcessingImage,
    isDialogOpen,
    setIsDialogOpen,
    processImages,
    openCamera,
  };
};