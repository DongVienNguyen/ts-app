import { useState } from 'react';
import { toast } from 'sonner';
import { analyzeImageWithGemini, GeminiAnalysisResult } from '@/services/geminiService';

interface UseImageProcessingProps {
  onAssetCodesDetected: (codes: string[]) => void;
  onRoomDetected: (room: string) => void;
}

export const useImageProcessing = ({ onAssetCodesDetected, onRoomDetected }: UseImageProcessingProps) => {
  const [isProcessingImage, setIsProcessingImage] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const processImages = async (files: FileList | null): Promise<GeminiAnalysisResult | undefined> => {
    if (!files || files.length === 0) {
      toast.error("Kh√¥ng c√≥ t·ªáp n√†o ƒë∆∞·ª£c ch·ªçn.");
      return;
    }

    setIsProcessingImage(true);
    setIsDialogOpen(false); // Close dialog immediately

    const imageFile = files[0];

    const MAX_FILE_SIZE_MB = 5; // 5 MB
    const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;

    if (imageFile.size > MAX_FILE_SIZE_BYTES) {
      toast.error(`K√≠ch th∆∞·ªõc t·ªáp qu√° l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n ${MAX_FILE_SIZE_MB}MB.`);
      setIsProcessingImage(false);
      return;
    }

    // Show processing toast
    const processingToast = toast.loading("ü§ñ ƒêang ph√¢n t√≠ch h√¨nh ·∫£nh b·∫±ng AI...", {
      description: "Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t"
    });

    try {
      const result = await analyzeImageWithGemini(imageFile);

      console.log('Image processing result:', result);

      // Dismiss processing toast
      toast.dismiss(processingToast);

      if (result.assetCodes && result.assetCodes.length > 0) {
        onAssetCodesDetected(result.assetCodes);
        toast.success(
          `üéØ Ph√°t hi·ªán ${result.assetCodes.length} m√£ t√†i s·∫£n!`,
          { 
            description: `M√£ t√†i s·∫£n: ${result.assetCodes.join(', ')}`,
            duration: 5000
          }
        );
      } else {
        toast.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ t√†i s·∫£n", {
          description: "H√£y th·ª≠ ch·ª•p ·∫£nh r√µ n√©t h∆°n ho·∫∑c ƒë·∫£m b·∫£o m√£ t√†i s·∫£n hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß"
        });
      }

      if (result.detectedRoom) {
        onRoomDetected(result.detectedRoom);
        toast.success(
          `üìç Ph√°t hi·ªán ph√≤ng: ${result.detectedRoom}`,
          { duration: 3000 }
        );
      }

      return result;
    } catch (error) {
      console.error('Error processing image:', error);
      toast.dismiss(processingToast);
      
      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω h√¨nh ·∫£nh.';
      toast.error("‚ùå L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh", { 
        description: errorMessage,
        duration: 5000
      });
      return undefined;
    } finally {
      setIsProcessingImage(false);
    }
  };

  const openCamera = async () => {
    try {
      console.log('üì± Opening camera...');
      
      // Check if camera is supported
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        toast.error("üì± Camera kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n thi·∫øt b·ªã n√†y");
        return;
      }

      // Create file input with camera capture
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = 'image/*';
      input.capture = 'environment'; // Use rear camera on mobile devices
      
      input.onchange = async (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files && target.files.length > 0) {
          console.log('üì∑ Camera captured image:', target.files[0]);
          const result = await processImages(target.files);
          if (result) {
            console.log('‚úÖ Camera image processed successfully:', result);
          }
        }
      };

      // Trigger camera
      input.click();
      
      // Close dialog when camera opens
      setIsDialogOpen(false);
      
      toast.info("üì± ƒêang m·ªü camera...", {
        description: "Ch·ª•p ·∫£nh m√£ t√†i s·∫£n r√µ n√©t ƒë·ªÉ AI ph√¢n t√≠ch"
      });
      
    } catch (error) {
      console.error('Error opening camera:', error);
      toast.error("‚ùå Kh√¥ng th·ªÉ m·ªü camera", {
        description: "Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p camera ho·∫∑c th·ª≠ upload ·∫£nh t·ª´ thi·∫øt b·ªã"
      });
    }
  };

  return {
    isProcessingImage,
    isDialogOpen,
    setIsDialogOpen,
    processImages,
    openCamera,
  };
};