import { useState } from 'react';
import { useAssetSubmission } from './useAssetSubmission';
import { AssetEntryFormState } from '@/types/assetEntryFormState';
import { FormData } from '@/types/assetSubmission';
import { useSecureAuth } from '@/contexts/AuthContext';

export const useAssetEntry = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { handleSubmit, isLoading } = useAssetSubmission();
  const { user } = useSecureAuth();

  const submitAssetEntry = async (
    formData: AssetEntryFormState,
    multipleAssets: string[]
  ): Promise<{ success: boolean; error?: string }> => {
    if (isSubmitting || isLoading) {
      return { success: false, error: 'ƒêang x·ª≠ l√Ω, vui l√≤ng ƒë·ª£i...' };
    }

    setIsSubmitting(true);
    
    try {
      console.log('üöÄ Submitting asset entry:', { formData, multipleAssets });
      
      // Filter out empty assets
      const validAssets = multipleAssets.filter(asset => asset.trim() !== '');
      
      if (validAssets.length === 0) {
        return { success: false, error: 'Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt m√£ t√†i s·∫£n' };
      }

      // Validate required fields
      if (!formData.room || !formData.transaction_type || !formData.parts_day || !formData.transaction_date) {
        return { success: false, error: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc' };
      }

      if (!user?.username) {
        return { success: false, error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.' };
      }

      // Convert AssetEntryFormState to FormData format expected by handleSubmit
      const submissionFormData: FormData = {
        room: formData.room,
        transaction_type: formData.transaction_type,
        parts_day: formData.parts_day,
        transaction_date: formData.transaction_date,
        note: formData.note || ''
      };

      return new Promise((resolve, reject) => {
        try {
          handleSubmit(
            submissionFormData,
            validAssets,
            false, // isRestrictedTime - we handle this in the parent component
            () => {
              console.log('‚úÖ Asset entry submitted successfully');
              resolve({ success: true });
            },
            user.username
          );
        } catch (error) {
          console.error('‚ùå Error in handleSubmit:', error);
          reject(error);
        }
      });
    } catch (error) {
      console.error('‚ùå Error in submitAssetEntry:', error);
      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng b√°o';
      return { success: false, error: errorMessage };
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting: isSubmitting || isLoading,
    submitAssetEntry,
  };
};