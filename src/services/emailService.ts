import { supabase } from '@/integrations/supabase/client';
import { EMAIL_CONFIG } from '@/config';

export interface EmailOptions {
  to: string | string[];
  subject: string;
  html: string;
  type?: string;
  data?: any;
}

export interface EmailResponse {
  success: boolean;
  data?: any;
  error?: string;
  message?: string;
  from?: string;
}

/**
 * Send email using Resend API via Supabase Edge Function
 */
export const sendEmail = async (options: EmailOptions): Promise<EmailResponse> => {
  try {
    console.log('üìß EmailService: Preparing to send email...');
    console.log('üìß To:', Array.isArray(options.to) ? options.to.join(', ') : options.to);
    console.log('üìß Subject:', options.subject);
    console.log('üìß Type:', options.type);

    const requestBody = {
      to: options.to,
      subject: options.subject,
      html: options.html,
      type: options.type,
      data: options.data
    };

    console.log('üìß Calling Supabase Edge Function...');
    const { data, error } = await supabase.functions.invoke('send-notification-email', {
      body: requestBody
    });

    console.log('üìß Edge Function response:', { data, error });

    if (error) {
      console.error('‚ùå Supabase function error:', error);
      throw new Error(`Supabase function error: ${error.message || JSON.stringify(error)}`);
    }

    if (!data) {
      console.error('‚ùå No data returned from Edge Function');
      throw new Error('No data returned from Edge Function');
    }

    if (!data.success) {
      console.error('‚ùå Email send failed:', data.error);
      throw new Error(data.error || 'Email send failed');
    }

    console.log('‚úÖ Email sent successfully');
    return {
      success: true,
      data: data.data,
      message: data.message,
      from: data.from
    };

  } catch (error: any) {
    console.error('‚ùå Email service error:', error);
    return {
      success: false,
      error: error.message || 'Unknown email error'
    };
  }
};

/**
 * Send test email
 */
export const sendTestEmail = async (to: string, username: string = 'Test User'): Promise<EmailResponse> => {
  console.log('üìß Sending test email to:', to, 'for user:', username);
  
  return sendEmail({
    to,
    subject: `[TEST] Email t·ª´ ${EMAIL_CONFIG.name}`,
    html: '', // Will be generated by Edge Function
    type: 'test',
    data: { username }
  });
};

/**
 * Send asset notification email
 */
export const sendAssetNotificationEmail = async (
  recipients: string[],
  subject: string,
  content: string
): Promise<EmailResponse> => {
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${subject}</title>
    </head>
    <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="background: linear-gradient(135deg, #1e40af 0%, #1e3a8a 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0;">
        <h1 style="margin: 0; font-size: 24px;">üìã H·ªá th·ªëng Qu·∫£n l√Ω T√†i s·∫£n - CRC</h1>
        <p style="margin: 5px 0 0 0; opacity: 0.9;">T√†i s·∫£n - CRC - H·ªá th·ªëng Qu·∫£n l√Ω N·ªôi b·ªô</p>
      </div>
      <div style="background: white; border: 1px solid #e5e7eb; border-top: none; padding: 20px; border-radius: 0 0 8px 8px;">
        <div style="white-space: pre-line; line-height: 1.6;">${content}</div>
      </div>
      <div style="text-align: center; margin-top: 20px; color: #6b7280; font-size: 12px; border-top: 1px solid #e5e7eb; padding-top: 15px;">
        <p><strong>H·ªá th·ªëng Qu·∫£n l√Ω T√†i s·∫£n - CRC</strong></p>
        <p>H·ªá th·ªëng Qu·∫£n l√Ω T√†i s·∫£n N·ªôi b·ªô</p>
        <p>Th·ªùi gian g·ª≠i: ${new Date().toLocaleString('vi-VN')}</p>
      </div>
    </body>
    </html>
  `;

  return sendEmail({
    to: recipients,
    subject,
    html: htmlContent,
    type: 'asset_notification'
  });
};

/**
 * Send asset transaction confirmation email
 */
export const sendAssetTransactionConfirmation = async (
  username: string,
  transactions: any[],
  success: boolean
): Promise<EmailResponse> => {
  const subject = success 
    ? `X√°c nh·∫≠n giao d·ªãch t√†i s·∫£n th√†nh c√¥ng - ${username}`
    : `L·ªói giao d·ªãch t√†i s·∫£n - ${username}`;

  const content = success
    ? `Xin ch√†o ${username},

Giao d·ªãch t√†i s·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.

Th√¥ng tin giao d·ªãch:
- S·ªë l∆∞·ª£ng t√†i s·∫£n: ${transactions.length}
- Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}

C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng.`
    : `Xin ch√†o ${username},

C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω giao d·ªãch t√†i s·∫£n c·ªßa b·∫°n.

Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£.`;

  // Get user email from staff table
  const { data: staffData } = await supabase
    .from('staff')
    .select('email')
    .eq('username', username)
    .single();

  const userEmail = staffData?.email ? `${staffData.email}@company.com` : `${username}@company.com`;

  return sendAssetNotificationEmail([userEmail], subject, content);
};

/**
 * Send error report email
 */
export const sendErrorReport = async (
  reporterName: string,
  reporterEmail: string,
  errorData: {
    title: string;
    description: string;
    stepsToReproduce?: string;
    expectedResult?: string;
    actualResult?: string;
    userAgent?: string;
    url?: string;
    timestamp?: string;
  }
): Promise<EmailResponse> => {
  const subject = `[B√ÅO C√ÅO L·ªñI] ${errorData.title}`;
  
  const content = `B√°o c√°o l·ªói m·ªõi t·ª´ h·ªá th·ªëng:

üë§ Ng∆∞·ªùi b√°o c√°o: ${reporterName}
üìß Email: ${reporterEmail}
üïê Th·ªùi gian: ${errorData.timestamp || new Date().toLocaleString('vi-VN')}

üìã TH√îNG TIN L·ªñI:
Ti√™u ƒë·ªÅ: ${errorData.title}
M√¥ t·∫£: ${errorData.description}

${errorData.stepsToReproduce ? `üîÑ C√°c b∆∞·ªõc t√°i hi·ªán:
${errorData.stepsToReproduce}

` : ''}${errorData.expectedResult ? `‚úÖ K·∫øt qu·∫£ mong ƒë·ª£i:
${errorData.expectedResult}

` : ''}${errorData.actualResult ? `‚ùå K·∫øt qu·∫£ th·ª±c t·∫ø:
${errorData.actualResult}

` : ''}üåê TH√îNG TIN K·ª∏ THU·∫¨T:
URL: ${errorData.url || 'N/A'}
User Agent: ${errorData.userAgent || 'N/A'}

Vui l√≤ng ki·ªÉm tra v√† x·ª≠ l√Ω l·ªói n√†y.`;

  // Send to admin
  const { data: adminData } = await supabase
    .from('staff')
    .select('email')
    .eq('role', 'admin')
    .limit(1)
    .single();

  const adminEmail = adminData?.email ? `${adminData.email}@company.com` : 'admin@company.com';

  return sendAssetNotificationEmail([adminEmail], subject, content);
};

/**
 * Test email function
 */
export const testEmailFunction = async (username: string): Promise<EmailResponse> => {
  return sendTestEmail('test@example.com', username);
};

/**
 * Get admin email
 */
export const getAdminEmail = async (): Promise<string | null> => {
  try {
    const { data: adminData } = await supabase
      .from('staff')
      .select('email')
      .eq('role', 'admin')
      .limit(1)
      .single();

    return adminData?.email ? `${adminData.email}@company.com` : null;
  } catch (error) {
    console.error('Error getting admin email:', error);
    return null;
  }
};

/**
 * Check email service status
 */
export const checkEmailStatus = async () => {
  try {
    console.log('üìß Checking email service status...');
    
    const { data, error } = await supabase.functions.invoke('send-notification-email', {
      body: { type: 'api_check' }
    });

    console.log('üìß Email status check response:', { data, error });

    if (error) {
      console.error('‚ùå Email status check error:', error);
      throw error;
    }

    return {
      success: data.success,
      service: data.service,
      timestamp: data.timestamp
    };
  } catch (error: any) {
    console.error('‚ùå Email status check error:', error);
    return {
      success: false,
      error: error.message,
      service: { configured: false, status: 'Error checking status' }
    };
  }
};

// Export emailService object for compatibility
export const emailService = {
  sendEmail,
  sendTestEmail,
  sendAssetNotificationEmail,
  sendAssetTransactionConfirmation,
  sendErrorReport,
  testEmailFunction,
  getAdminEmail,
  checkEmailStatus
};

export default emailService;