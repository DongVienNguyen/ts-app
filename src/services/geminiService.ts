import { supabase } from '@/integrations/supabase/client';

export interface GeminiAnalysisResult {
  foundCount: number;
  assetCodes: string[];
  detectedRoom?: string;
  confidence: number;
}

export const analyzeImageWithGemini = async (imageFile: File): Promise<GeminiAnalysisResult> => {
  try {
    console.log('üöÄ Starting image analysis with Gemini for file:', imageFile.name);
    console.log('üìä File size:', (imageFile.size / 1024 / 1024).toFixed(2), 'MB');
    console.log('üì∑ File type:', imageFile.type);
    
    // Convert image to base64
    const base64Image = await convertFileToBase64(imageFile);
    console.log('‚úÖ Image converted to base64, size:', base64Image.length);
    
    console.log('üì° Calling Supabase edge function...');
    const response = await supabase.functions.invoke('analyze-asset-image', {
      body: {
        image: base64Image,
        mimeType: imageFile.type
      }
    });

    console.log('üì® Supabase function response:', response);

    if (response.error) {
      console.error('‚ùå Gemini API error:', response.error);
      throw new Error('L·ªói khi ph√¢n t√≠ch h√¨nh ·∫£nh: ' + response.error.message);
    }

    if (!response.data) {
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ API');
    }

    console.log('üéâ Analysis result:', response.data);
    
    // Validate result structure
    const result = response.data as GeminiAnalysisResult;
    if (!result.assetCodes) {
      result.assetCodes = [];
    }
    if (typeof result.foundCount !== 'number') {
      result.foundCount = result.assetCodes.length;
    }
    if (typeof result.confidence !== 'number') {
      result.confidence = result.assetCodes.length > 0 ? 0.9 : 0;
    }
    
    return result;
  } catch (error) {
    console.error('üí• Error analyzing image:', error);
    
    // Provide more specific error messages
    if (error instanceof Error) {
      if (error.message.includes('network')) {
        throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.');
      } else if (error.message.includes('timeout')) {
        throw new Error('Qu√° th·ªùi gian x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh nh·ªè h∆°n.');
      } else if (error.message.includes('API key')) {
        throw new Error('L·ªói c·∫•u h√¨nh API. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.');
      }
    }
    
    throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn ·∫£nh kh√°c.');
  }
};

const convertFileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    console.log('üîÑ Converting file to base64...');
    const reader = new FileReader();
    
    reader.readAsDataURL(file);
    
    reader.onload = () => {
      const result = reader.result as string;
      // Remove data:image/jpeg;base64, prefix
      const base64 = result.split(',')[1];
      console.log('‚úÖ File converted to base64 successfully');
      resolve(base64);
    };
    
    reader.onerror = error => {
      console.error('‚ùå Error converting file to base64:', error);
      reject(new Error('Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.'));
    };
  });
};